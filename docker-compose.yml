# Electronics HAL - Docker Compose Configuration
# Provides complete testing environment with monitoring

version: '3.8'

services:
  # Main HAL application
  electronics-hal:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: electronics-hal-app
    volumes:
      # Persistent data directories
      - hal-logs:/app/logs
      - hal-reports:/app/reports
      - hal-test-data:/app/test_data
      - hal-monitoring:/app/monitoring_data
      - hal-simulation:/app/simulation_data
      # Configuration files
      - ./config:/app/config:ro
      # USB device access for real instruments
      - /dev/bus/usb:/dev/bus/usb
    environment:
      - HAL_CONFIG_FILE=/app/config/hal_config.yml
      - HAL_LOG_LEVEL=INFO
      - PYTHONPATH=/app
    networks:
      - hal-network
    # USB device access
    privileged: true
    devices:
      - /dev/bus/usb:/dev/bus/usb
    command: ["python", "-m", "hal.cli", "run", "--config", "/app/config/hal_config.yml"]

  # Monitoring dashboard
  hal-dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hal-dashboard
    ports:
      - "5000:5000"
    volumes:
      - hal-monitoring:/app/monitoring_data:ro
      - hal-logs:/app/logs:ro
    environment:
      - HAL_DASHBOARD_HOST=0.0.0.0
      - HAL_DASHBOARD_PORT=5000
      - HAL_DASHBOARD_DEBUG=false
    networks:
      - hal-network
    depends_on:
      - electronics-hal
    command: ["python", "-m", "hal.monitoring.dashboard_server"]

  # Redis for caching and pub/sub (optional)
  redis:
    image: redis:7-alpine
    container_name: hal-redis
    ports:
      - "6379:6379"
    volumes:
      - hal-redis-data:/data
    networks:
      - hal-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: hal-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - hal-prometheus-data:/prometheus
    networks:
      - hal-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: hal-grafana
    ports:
      - "3000:3000"
    volumes:
      - hal-grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=hal-admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    networks:
      - hal-network
    depends_on:
      - prometheus

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: hal-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/ssl:ro
    networks:
      - hal-network
    depends_on:
      - hal-dashboard
      - grafana

# Named volumes for persistent data
volumes:
  hal-logs:
    driver: local
  hal-reports:
    driver: local
  hal-test-data:
    driver: local
  hal-monitoring:
    driver: local
  hal-simulation:
    driver: local
  hal-redis-data:
    driver: local
  hal-prometheus-data:
    driver: local
  hal-grafana-data:
    driver: local

# Network for service communication
networks:
  hal-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16