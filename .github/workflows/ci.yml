# Electronics HAL - Continuous Integration Pipeline
# Comprehensive CI/CD with testing, quality checks, and deployment

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  UV_VERSION: '0.4.0'

jobs:
  # Code Quality and Linting
  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      run: pip install uv==${{ env.UV_VERSION }}

    - name: Install dependencies
      run: |
        uv venv
        uv sync --frozen

    - name: Run ruff linting
      run: |
        source .venv/bin/activate
        ruff check . --output-format=github

    - name: Run ruff formatting check
      run: |
        source .venv/bin/activate
        ruff format --check .

    - name: Run mypy type checking
      run: |
        source .venv/bin/activate
        mypy hal/ --show-error-codes

    - name: Check import sorting
      run: |
        source .venv/bin/activate
        ruff check --select I .

  # Unit and Integration Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      run: pip install uv==${{ env.UV_VERSION }}

    - name: Install dependencies
      run: |
        uv venv
        uv sync --frozen

    - name: Run unit tests
      run: |
        source .venv/bin/activate || .venv\Scripts\activate
        pytest tests/unit/ -v --junitxml=test-results-unit.xml --cov=hal --cov-report=xml

    - name: Run integration tests
      run: |
        source .venv/bin/activate || .venv\Scripts\activate
        python integration_test.py

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.os }}
        path: |
          test-results-*.xml
          coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Hardware Simulation Tests
  simulation-tests:
    name: Hardware Simulation Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      run: pip install uv==${{ env.UV_VERSION }}

    - name: Install dependencies
      run: |
        uv venv
        uv sync --frozen

    - name: Run Rohde & Schwarz driver tests
      run: |
        source .venv/bin/activate
        python test_rohde_schwarz.py

    - name: Run simulation framework tests
      run: |
        source .venv/bin/activate
        pytest tests/simulation/ -v --junitxml=test-results-simulation.xml

    - name: Upload simulation test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: simulation-test-results
        path: test-results-simulation.xml

  # Documentation Build
  documentation:
    name: Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      run: pip install uv==${{ env.UV_VERSION }}

    - name: Install dependencies
      run: |
        uv venv
        uv sync --frozen
        uv add sphinx sphinx-rtd-theme

    - name: Build documentation
      run: |
        source .venv/bin/activate
        cd docs
        make html

    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/html/

  # Docker Build and Test
  docker:
    name: Docker Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: electronics-hal:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm electronics-hal:test python -c "import hal; print('HAL imports successfully')"

    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml config
        docker-compose -f docker-compose.yml -f docker/docker-compose.dev.yml config

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      run: pip install uv==${{ env.UV_VERSION }}

    - name: Install dependencies
      run: |
        uv venv
        uv sync --frozen

    - name: Run safety check
      run: |
        source .venv/bin/activate
        uv add safety
        safety check

    - name: Run bandit security linter
      run: |
        source .venv/bin/activate
        uv add bandit
        bandit -r hal/ -f json -o bandit-report.json

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  # Performance Benchmarks
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[benchmark]')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      run: pip install uv==${{ env.UV_VERSION }}

    - name: Install dependencies
      run: |
        uv venv
        uv sync --frozen
        uv add pytest-benchmark

    - name: Run performance benchmarks
      run: |
        source .venv/bin/activate
        pytest tests/performance/ --benchmark-json=benchmark-results.json

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark-results.json

  # Deployment to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    needs: [quality, test, docker]
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.CONTAINER_REGISTRY }}
        username: ${{ secrets.CONTAINER_USERNAME }}
        password: ${{ secrets.CONTAINER_PASSWORD }}

    - name: Build and push development image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.CONTAINER_REGISTRY }}/electronics-hal:dev
          ${{ secrets.CONTAINER_REGISTRY }}/electronics-hal:dev-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to development environment
      run: |
        # Add deployment scripts here
        echo "Deploying to development environment"

  # Release to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [quality, test, docker, security]
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.CONTAINER_REGISTRY }}
        username: ${{ secrets.CONTAINER_USERNAME }}
        password: ${{ secrets.CONTAINER_PASSWORD }}

    - name: Extract version
      id: version
      run: |
        VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Build and push production image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.CONTAINER_REGISTRY }}/electronics-hal:latest
          ${{ secrets.CONTAINER_REGISTRY }}/electronics-hal:${{ steps.version.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        draft: false
        prerelease: false

  # Notification
  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    if: always()
    needs: [quality, test, docker]

    steps:
    - name: Notify on success
      if: needs.quality.result == 'success' && needs.test.result == 'success' && needs.docker.result == 'success'
      run: |
        echo "✅ All CI checks passed successfully!"
        # Add Slack/Teams notification here

    - name: Notify on failure
      if: needs.quality.result == 'failure' || needs.test.result == 'failure' || needs.docker.result == 'failure'
      run: |
        echo "❌ CI checks failed!"
        # Add failure notification here